@model Web.Areas.User.ViewModels.UserGameDetailViewModel
@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>
@using (Html.BeginForm("Edit", "UserGame", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new {@class = "text-danger"})
    <div class="table-responsive ">
        <table class="table table-bordered table-striped">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Game.Track.TrackName)
                </th>
                @foreach (var item in Model.BasketsInTrack)
                {
                    <th>

                        @Html.DisplayFor(model => item.BasketNr) - Par @Html.DisplayFor(model => item.Pars)<br/>
                        @Html.DisplayFor(model => item.Distance)m
                    </th>
                }
                <th>
                    @Resources.Common.Total
                </th>

            </tr>

            @foreach (var user in Model.Users)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => user.UserName)
                    </td>
                    @*@foreach (var item in Model.BasketsInTrack)
                    {
                        <td>
                            @Html.EditorFor(model => item.Scores.FirstOrDefault(x => x.BasketId == item.BasketId && x.PlayerInGame.UserId == user.Id).Throws, new {htmlAttributes = new {@class = "form-control", @placeholder = @Resources.Domain.Throws}}) <br/>
                            @Html.EditorFor(model => item.Scores.FirstOrDefault(x => x.BasketId == item.BasketId).ThrowStyle, new {htmlAttributes = new {@class = "form-control", @placeholder = @Resources.Domain.ThrowStyle}}) <br/>
                            @Html.EditorFor(model => item.Scores.FirstOrDefault(x => x.BasketId == item.BasketId).Comment, new {htmlAttributes = new {@class = "form-control", @placeholder = @Resources.Domain.Comment}})
                        </td>
                    }*@
                    @foreach (var item in Model.Scores.Where(x => x.PlayerInGameId == user.PlayerInGames.Find(y => y.GameId == Model.Game.GameId && y.UserId == user.Id).PlayerInGameId))
                    {
                        <td>
                            @Html.EditorFor(model => item.Throws, new { htmlAttributes = new { @class = "form-control", @placeholder = @Resources.Domain.Throws } }) <br />
                            @Html.EditorFor(model => item.ThrowStyle, new { htmlAttributes = new { @class = "form-control", @placeholder = @Resources.Domain.ThrowStyle } }) <br />
                            @Html.EditorFor(model => item.Comment, new { htmlAttributes = new { @class = "form-control", @placeholder = @Resources.Domain.Comment } })
                       
                        </td>
                    }
                    @if (Model.Scores != null)
                    {
                        <td>
                            <strong>@Html.DisplayFor(t => t.Totalx.FirstOrDefault(y => y.Key == user.Id).Value)</strong>
                        </td>
                    }
                    else
                    {
                        <td>
                            <strong>0</strong>
                        </td>
                    }
                </tr>
            }

        </table>
    </div>

    @*@Html.HiddenFor(model => model.BasketsInTrack.ToList())
    @Html.HiddenFor(model => model.BasketsInTrack);*@
    @*@Html.HiddenFor(Model.Scores = Model.BasketsInTrack.Where(x => x.Scores.FindAll(y => y.GameId == Model.Game.GameId).ToList() != null).ToList())*@



    <div class="form-group">
        <div align="right">
            <input type="submit" value=@Resources.Common.Save class="btn btn-primary btn-lg"/>
        </div>
    </div>
}
